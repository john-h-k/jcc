cmake_minimum_required(VERSION 3.13)
project(jcc C)
set(CMAKE_C_STANDARD 11)

set(CMAKE_COMPILE_WARNING_AS_ERROR ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(
  SOURCE_FILES
  src/main.c
  src/args.c

  src/util.c
  src/vector.c
  src/hashtbl.c
  src/deque.c
  src/hash.c
  src/bitset.c

  src/profile.c

  src/alloc.c
  src/log.c
  src/graphwriter.c

  src/compiler.c
  src/diagnostics.c
  src/builtins.c
  src/lex.c
  src/io.c
  src/parse.c
  src/preproc.c
  src/program.c
  src/lower.c
  src/liveness.c
  src/disasm.c
  src/codegen.c
  src/var_table.c
  src/typechk.c
  src/lsra.c
  src/graphcol.c
  src/
  src/ir/ir.c
  src/ir/build.c
  src/ir/var_refs.c
  src/ir/eliminate_phi.c
  src/ir/prettyprint.c
  src/ir/validate.c
  src/ir/rw.c

  src/opts/opts.c
  src/opts/cnst_fold.c
  src/opts/cnst_branches.c
  src/opts/instr_comb.c
  src/opts/promote.c
  src/opts/inline.c

  src/aarch64.c
  src/aarch64/codegen.c
  src/aarch64/lower.c
  src/aarch64/emit.c
  src/aarch64/emitter.c

  src/x64.c
  src/x64/codegen.c
  src/x64/lower.c
  src/x64/emit.c
  src/x64/emitter.c

  src/rv32i.c
  src/rv32i/codegen.c
  src/rv32i/lower.c
  src/rv32i/emit.c
  src/rv32i/emitter.c
  src/rv32i/object.c

  # eep.c
  # eep/codegen.c
  # eep/lower.c
  # eep/emit.c
  # eep/emitter.c
  # eep/object.c
  # eep/disasm.c

  src/macos/mach-o.c
  src/macos/link.c

  src/linux/elf.c
  src/linux/link.c
)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  message(STATUS "Debug build detected")

  if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    message(WARNING "Debug mode may be VERY SLOW on GCC due to ASan problems - Clang w/ ASan is significantly faster")
  endif()
  
  add_link_options(-fsanitize=address,undefined)
  add_compile_options(-fsanitize=address,undefined -fno-sanitize-recover=all)

  add_compile_options(-g)
  add_link_options(-g3 -ldl)
  add_link_options(-rdynamic)
endif()

if(MSVC)
  add_compile_option(/W4 /WX)
elseif(CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
  message(STATUS "Building with AppleClang")

  add_compile_options(
    -Wall
    -Wextra
    -Wpedantic
    -Weverything

    -Wno-error=unreachable-code

    -Wzero-as-null-pointer-constant
    -Wbool-conversion

    -Wmissing-prototypes
    -Wsign-conversion
    -Wimplicit-fallthrough
    -Wstrict-prototypes
    -Wmissing-field-initializers

    # i would _like_ to enable this, but it causes errors everywhere flag enums are used
    -Wno-sign-conversion

    -Wno-missing-noreturn
    -Wno-unused-macros
    -Wno-switch-enum
    -Wno-bad-function-cast
    -Wno-undef
    -Wno-padded
    -Wno-declaration-after-statement
    -Wno-class-varargs
    -Wno-conditional-uninitialized
    -Wno-shorten-64-to-32
    -Wno-assign-enum
    # TODO: remove binary literals in source
    -Wno-gnu-binary-literal
  )
elseif(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  # nothing for now
elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  # nothing for now
else()
  message(WARNING "Unknown compiler: ${CMAKE_C_COMPILER_ID}")
endif()

add_executable(jcc ${SOURCE_FILES})
target_link_libraries(jcc m)

